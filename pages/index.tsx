import React, { useState } from 'react';
import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import { useAccount } from 'wagmi';
import { Button, Typography, Layout, Space, Row, Col, Spin, Card } from 'antd'; // Import Card
import { createMerkleTree, getMerkleProof, verifyAddress, getRootHash } from '../utils/merkle';
import { mintTokens } from '../utils/claim';

const { Title, Paragraph } = Typography;
const { Header, Content, Footer } = Layout;

const Home: NextPage = () => {
  const { address } = useAccount();
  const [verificationResult, setVerificationResult] = useState<Boolean | null>(null);
  const [proof, setProof] = useState<string[] | null>(null);
  const [rootHash, setRootHash] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const allowlistAddresses = [
    '0x245E2395712F888CeD1033C924115105dC32e388',
    '0x1c012c479c144A8a3FAC3813D1D666B7A0cc3782',
  ];

  const handleGenerateProofAndRoot = () => {
    if (address) {
      const merkleTree = createMerkleTree(allowlistAddresses);
      const generatedProof = getMerkleProof(merkleTree, address);
      setProof(generatedProof);
      const root = getRootHash(merkleTree);
      setRootHash(root);

      const result = verifyAddress(merkleTree, address, generatedProof);
      setVerificationResult(result);
    }
  };

  const tokenEligible = async () => {
    if (verificationResult) {
      setLoading(true);
      try {
          const txHash = await mintTokens();
      } catch (error) {
        console.error('Minting error:', error);
      }
      setLoading(false);
    }
  };

  return (
    <Layout className={styles.container}>
      <Head>
        <title>Airdrop Builder</title>
        <meta content="Generated by create-next-app" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <Header className={styles.header}>
        <Row justify="space-between" align="middle" style={{ width: '100%' }}>
          <Col style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
            <Image src="/logo.png" alt="Logo" width={50} height={50} />
          </Col>
          <Col>
            <ConnectButton />
          </Col>
        </Row>
      </Header>

      <Content className={styles.main} style={{ padding: '50px' }}>
        <Row gutter={16} align="middle" justify="center">
        <Col span={12}> {}
  <Card 
    title="Generate Proof & Root Hash" 
    bordered={false} 
    style={{ textAlign: 'center', padding: '90px', margin: '20px' }} 
  >
    <Space direction="vertical" size="large" style={{ width: '100%' }}> {}
      <Button type="primary" onClick={handleGenerateProofAndRoot}>
        Generate
      </Button>
      {rootHash && <Paragraph>Root Hash: {rootHash}</Paragraph>}
      {proof && proof.length > 0 && <Paragraph>Proof: {proof.join(', ')}</Paragraph>}
    </Space>
  </Card>
</Col>
<Col span={12}> {}
  <Card 
    title="Claim Your Token" 
    bordered={false} 
    style={{ textAlign: 'center', padding: '20px', margin: '10px' }} 
  >
    <Space direction="vertical" size="large" style={{ width: '100%' }}> {/* Adjusted space size */}
      <Button type="primary" onClick={tokenEligible} disabled={!verificationResult || loading}>
        {loading ? <Spin /> : 'Mint'}
      </Button>
      {verificationResult !== null && (
        <Paragraph>Eligible for Airdrop: {verificationResult ? 'Yes' : 'No'}</Paragraph>
      )}
    </Space>
  </Card>
</Col>

        </Row>
      </Content>

      <Footer className={styles.footer} style={{ textAlign: 'center' }}>
        <a href="https://rainbow.me" target="_blank" rel="noopener noreferrer">
          Made with ‚ù§Ô∏è using RainbowKit üåà
        </a>
      </Footer>
    </Layout>
  );
};

export default Home;
